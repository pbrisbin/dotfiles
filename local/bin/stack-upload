#!/bin/sh
set -eu

usage() {
  cat <<'EOM'
Usage: stack-upload [-cutS] [-b upper|lower|both] [-p PREFIX]
Check, upload, and tag a Hackage project

Options:
  -c    Only check, do not upload or tag
  -u    Only upload, do not check or tag
  -t    Only tag, do not check or upload

  -b    Bounds (--pvp-bounds) to use (default: both)
  -p    Tag prefix to use (default: v)
  -S    Don't sign the git tag
EOM
}

# Verifies that the to-be-uploaded package, with automatically-managed version
# bounds, will also build on nightly -- as required to exist in Stackage. If
# this fails, you will need to add explicit bounds in package.yaml.
check_nightly() {
  tmp=$(mktemp -d)
  trap 'rm -rf -- "$tmp"' EXIT

  stack sdist --tar-dir "$tmp" --pvp-bounds "$upload_bounds" .

  (
    cd "$tmp"
    tar xzf ./*.tar.gz
    stack init --resolver nightly
    stack build --resolver nightly --haddock --test --bench --no-run-benchmarks
  )
}

check=1
upload=1
upload_bounds=both
tag=1
tag_prefix=v
tag_sign=1

while getopts 'cub:tp:Sh' opt; do
  case "$opt" in
    c)
      upload=0
      tag=0
      ;;
    u)
      check=0
      tag=0
      ;;
    t)
      check=0
      upload=0
      ;;
    b) upload_bounds=$OPTARG ;;
    p) tag_prefix=$OPTARG ;;
    S) tag_sign=0 ;;
    h)
      usage
      exit 0
      ;;
    \?)
      usage >&2
      exit 64
      ;;
  esac
done
shift $((OPTIND - 1))

stack build --dry-run # ensure updated .lock and .cabal

if [ "$(git diff --name-only | wc -l)" -ne 0 ]; then
  echo "Working directory is dirty" >&2

  if [ $((upload + tag)) -gt 0 ]; then
    echo "Refusing to upload or tag" >&2
    exit 1
  fi
fi

if [ "$check" -eq 1 ]; then
  echo "Checking package against nightly resolver"
  check_nightly
fi

if [ "$upload" -eq 1 ]; then
  echo "Uploading with --pvp-bounds $upload_bounds"
  stack upload --pvp-bounds "$upload_bounds" .
fi

if [ "$tag" -eq 1 ]; then
  tag_name=$(sed '/^version: *\([^ ]*\) *$/!d; s//'"$tag_prefix"'\1/' ./*.cabal)
  sign_option=

  if [ "$tag_name" = "$tag_prefix" ]; then
    echo "Unable to determine version from .cabal file" >&2
    exit 1
  fi

  if [ "$tag_sign" -eq 1 ]; then
    sign_option=--sign
  fi

  echo "Tagging as $tag_name"
  git tag $sign_option -m "$tag_name" "$tag_name"
  git push --follow-tags
fi
