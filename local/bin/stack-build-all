#!/usr/bin/env bash
set -euo pipefail

prompt() {
  local ans

  printf '%s? [Y/n] ' "$*"
  read -r ans

  case "$ans" in
    "") return 0 ;;
    Y | y) return 0 ;;
    *) return 1 ;;
  esac
}

list_stack_yamls() {
  if [[ -f .github/workflows/ci.yml ]] && command -v yq &>/dev/null; then
    # Only build what's CI-enabled
    yq -r '.jobs.test.strategy.matrix.stack-yaml[]' .github/workflows/ci.yml
  else
    # Build everything present
    find . -type f -wholename './stack-nightly.yaml'
    find . -type f -wholename './stack.yaml'
    find . -type f -wholename './stack-lts-*.yaml' | sort -rV
  fi
}

stack_build() {
  local tmp
  tmp=$(mktemp)

  echo "stack $* ${build_args[*]}"

  if ! stack "$@" build "${build_args[@]}" &>"$tmp"; then
    echo "stack-build error" >&2
    cat "$tmp" >&2
    rm "$tmp"
    exit 1
  fi

  rm "$tmp"
}

update_stack_yaml() {
  local ghc=$1 resolver=$2 stack_yaml=${3:-stack-$2.yaml}
  local stack_args=(--stack-yaml "$stack_yaml")

  if [[ -f "$stack_yaml" ]]; then
    echo "Updating existing $stack_yaml.lock"
  else
    if prompt "Set up $stack_yaml for ghc-$ghc"; then
      if [[ -f stack.yaml ]]; then
        cp stack.yaml "$stack_yaml"
      fi
    else
      return 0
    fi
  fi

  if [[ -f "$stack_yaml" ]]; then
    sed -i 's/^resolver: \([^ ]*\)\(.*\)$/resolver: '"$resolver"'\2/' "$stack_yaml"
  else
    echo "resolver: $resolver" >"$stack_yaml"
  fi

  stack_build "${stack_args[@]}"
}

first=1
if (($#)); then
  build_args=("$@")
else
  build_args=(--fast --pedantic --test --no-run-tests)
fi

if ((${SETUP:-0})); then
  echo "Fetching all LTS Snapshots..."

  while IFS=, read -r resolver ghc; do
    if ((first)); then
      update_stack_yaml "$ghc" "$resolver" stack.yaml </dev/tty
    else
      update_stack_yaml "$ghc" "$resolver" </dev/tty
    fi

    first=0
  done < <(stack-ls-snapshots)

  IFS=, read -r resolver ghc < <(stack-ls-snapshots --nightly | head -n 1)
  update_stack_yaml "$ghc" "$resolver" stack-nightly.yaml
else
  while read -r stack_yaml; do
    stack_build --stack-yaml "$stack_yaml"
  done < <(list_stack_yamls)
fi
