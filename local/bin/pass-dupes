#!/usr/bin/env stack
-- stack script --resolver lts-16.12
-- vim: ft=haskell
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wall -Werror #-}

module Main
    ( main
    )
where

import RIO

import qualified Data.ByteString.Lazy.Char8 as BSL8
import RIO.FilePath (dropExtension, (</>))
import qualified RIO.HashMap as HashMap
import RIO.List (dropPrefix, intercalate)
import RIO.Process
import System.Environment (getEnv)

main :: IO ()
main = do
    store <- (</> ".password-store/") <$> getEnv "HOME"

    runSimpleApp $ do
        names <- map (dropExtension . dropPrefix store)
            <$> readProcessLines "find" [store, "-type", "f", "-name", "*.gpg"]

        let total = length names

        passwords <- foldM
            (\m name -> do
                logSticky $ progress (sum $ map length $ HashMap.elems m) total
                maybe m (\password -> HashMap.insertWith (<>) password [name] m)
                    . listToMaybe
                    <$> readProcessLines "pass" [name]
            )
            HashMap.empty
            names

        logStickyDone $ progress total total
        traverse_ warnDuplicates $ HashMap.elems $ HashMap.filter
            ((> 1) . length)
            passwords

warnDuplicates
    :: (MonadIO m, MonadReader env m, HasLogFunc env) => [String] -> m ()
warnDuplicates xs =
    logWarn $ "All of the following use the same password:\n  " <> fromString
        (intercalate "\n  " xs)

progress :: Int -> Int -> Utf8Builder
progress c t =
    "Reading passwords... "
        <> "["
        <> displayShow c
        <> "/"
        <> displayShow t
        <> "]"

readProcessLines
    :: (MonadIO m, MonadReader env m, HasLogFunc env, HasProcessContext env)
    => String
    -> [String]
    -> m [String]
readProcessLines cmd args = do
    bs <- proc cmd args readProcessStdout_
    pure $ lines $ BSL8.unpack bs
